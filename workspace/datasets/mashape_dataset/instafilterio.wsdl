<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<definitions targetNamespace='http://generatedWSDL.com/instafilterIo/' name='instafilterIo' xmlns='http://schemas.xmlsoap.org/wsdl/' xmlns:wsdl='http://schemas.xmlsoap.org/wsdl/' xmlns:tns='http://generatedWSDL.com/instafilterIo/'>
  <types>
    <xsd:schema targetNamespace='http://generatedWSDL.com/instafilterIo/' attributeFormDefault='unqualified' elementFormDefault='unqualified' xmlns:xsd='http://www.w3.org/2001/XMLSchema' xmlns:tns='http://generatedWSDL.com/instafilterIo/'>
      <xsd:element name='blackWhiteResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='coloredEdgeDetectionResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='contrastResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='cropResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='customHsbResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='edgeDetectionResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='gammaResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='invertResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='levelsResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='mosaicResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='noiseResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='oilResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='paddingResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='resizeResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='rgbMixerResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='rotateResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
    </xsd:schema>
  </types>
  <message name='blackWhiteRequestMessage' />
  <message name='blackWhiteResponseMessage'>
    <part name='response' element='tns:blackWhiteResponse' />
  </message>
  <message name='coloredEdgeDetectionRequestMessage' />
  <message name='coloredEdgeDetectionResponseMessage'>
    <part name='response' element='tns:coloredEdgeDetectionResponse' />
  </message>
  <message name='contrastRequestMessage' />
  <message name='contrastResponseMessage'>
    <part name='response' element='tns:contrastResponse' />
  </message>
  <message name='cropRequestMessage' />
  <message name='cropResponseMessage'>
    <part name='response' element='tns:cropResponse' />
  </message>
  <message name='customHsbRequestMessage' />
  <message name='customHsbResponseMessage'>
    <part name='response' element='tns:customHsbResponse' />
  </message>
  <message name='edgeDetectionRequestMessage' />
  <message name='edgeDetectionResponseMessage'>
    <part name='response' element='tns:edgeDetectionResponse' />
  </message>
  <message name='gammaRequestMessage' />
  <message name='gammaResponseMessage'>
    <part name='response' element='tns:gammaResponse' />
  </message>
  <message name='invertRequestMessage' />
  <message name='invertResponseMessage'>
    <part name='response' element='tns:invertResponse' />
  </message>
  <message name='levelsRequestMessage' />
  <message name='levelsResponseMessage'>
    <part name='response' element='tns:levelsResponse' />
  </message>
  <message name='mosaicRequestMessage' />
  <message name='mosaicResponseMessage'>
    <part name='response' element='tns:mosaicResponse' />
  </message>
  <message name='noiseRequestMessage' />
  <message name='noiseResponseMessage'>
    <part name='response' element='tns:noiseResponse' />
  </message>
  <message name='oilRequestMessage' />
  <message name='oilResponseMessage'>
    <part name='response' element='tns:oilResponse' />
  </message>
  <message name='paddingRequestMessage' />
  <message name='paddingResponseMessage'>
    <part name='response' element='tns:paddingResponse' />
  </message>
  <message name='resizeRequestMessage' />
  <message name='resizeResponseMessage'>
    <part name='response' element='tns:resizeResponse' />
  </message>
  <message name='rgbMixerRequestMessage' />
  <message name='rgbMixerResponseMessage'>
    <part name='response' element='tns:rgbMixerResponse' />
  </message>
  <message name='rotateRequestMessage' />
  <message name='rotateResponseMessage'>
    <part name='response' element='tns:rotateResponse' />
  </message>
  <portType name='instafilterIoPortType'>
    <operation name='blackWhite'>
      <documentation>converts the image colors to shades of grey</documentation>
      <input message='tns:blackWhiteRequestMessage' name='blackWhiteInput' />
      <output message='tns:blackWhiteResponseMessage' name='blackWhiteOutput' />
    </operation>
    <operation name='coloredEdgeDetection'>
      <documentation>similar to the Edge Detection filter except with more color</documentation>
      <input message='tns:coloredEdgeDetectionRequestMessage' name='coloredEdgeDetectionInput' />
      <output message='tns:coloredEdgeDetectionResponseMessage' name='coloredEdgeDetectionOutput' />
    </operation>
    <operation name='contrast'>
      <documentation>changes the gain and bias of the colors in the image</documentation>
      <input message='tns:contrastRequestMessage' name='contrastInput' />
      <output message='tns:contrastResponseMessage' name='contrastOutput' />
    </operation>
    <operation name='crop'>
      <documentation>crops an image in a rectangle by specifying its size and coordinates</documentation>
      <input message='tns:cropRequestMessage' name='cropInput' />
      <output message='tns:cropResponseMessage' name='cropOutput' />
    </operation>
    <operation name='customHsb'>
      <documentation>specify custom hue saturation and brightness</documentation>
      <input message='tns:customHsbRequestMessage' name='customHsbInput' />
      <output message='tns:customHsbResponseMessage' name='customHsbOutput' />
    </operation>
    <operation name='edgeDetection'>
      <documentation>edge detection with a dark background</documentation>
      <input message='tns:edgeDetectionRequestMessage' name='edgeDetectionInput' />
      <output message='tns:edgeDetectionResponseMessage' name='edgeDetectionOutput' />
    </operation>
    <operation name='gamma'>
      <documentation>adjusts the gamma used for changing the brightness of an image</documentation>
      <input message='tns:gammaRequestMessage' name='gammaInput' />
      <output message='tns:gammaResponseMessage' name='gammaOutput' />
    </operation>
    <operation name='invert'>
      <documentation>inverts all the pixels of the image</documentation>
      <input message='tns:invertRequestMessage' name='invertInput' />
      <output message='tns:invertResponseMessage' name='invertOutput' />
    </operation>
    <operation name='levels'>
      <documentation>adjusts the image levels by moving and stretching the brightness of the image histogram</documentation>
      <input message='tns:levelsRequestMessage' name='levelsInput' />
      <output message='tns:levelsResponseMessage' name='levelsOutput' />
    </operation>
    <operation name='mosaic'>
      <documentation>creates a mosaic effect You can specify the block s size</documentation>
      <input message='tns:mosaicRequestMessage' name='mosaicInput' />
      <output message='tns:mosaicResponseMessage' name='mosaicOutput' />
    </operation>
    <operation name='noise'>
      <documentation>adds random noise to the image You can specify the amount and density</documentation>
      <input message='tns:noiseRequestMessage' name='noiseInput' />
      <output message='tns:noiseResponseMessage' name='noiseOutput' />
    </operation>
    <operation name='oil'>
      <documentation>creates an oil painting effect</documentation>
      <input message='tns:oilRequestMessage' name='oilInput' />
      <output message='tns:oilResponseMessage' name='oilOutput' />
    </operation>
    <operation name='padding'>
      <documentation>adds padding around the image You can specify both the size and the color</documentation>
      <input message='tns:paddingRequestMessage' name='paddingInput' />
      <output message='tns:paddingResponseMessage' name='paddingOutput' />
    </operation>
    <operation name='resize'>
      <documentation>shrinks an image while maintaining its aspect ratio</documentation>
      <input message='tns:resizeRequestMessage' name='resizeInput' />
      <output message='tns:resizeResponseMessage' name='resizeOutput' />
    </operation>
    <operation name='rgbMixer'>
      <documentation>mixes RGB channels For each channel you can specify how much of the other two channels to mix in</documentation>
      <input message='tns:rgbMixerRequestMessage' name='rgbMixerInput' />
      <output message='tns:rgbMixerResponseMessage' name='rgbMixerOutput' />
    </operation>
    <operation name='rotate'>
      <documentation>rotates the image by degrees or flips it horizontally or vertically</documentation>
      <input message='tns:rotateRequestMessage' name='rotateInput' />
      <output message='tns:rotateResponseMessage' name='rotateOutput' />
    </operation>
  </portType>
  <binding name='instafilterIoBinding' type='tns:instafilterIoPortType'>
    <operation name='blackWhite'>
      <soap12:operation soapAction='http://blackWhite' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='coloredEdgeDetection'>
      <soap12:operation soapAction='http://coloredEdgeDetection' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='contrast'>
      <soap12:operation soapAction='http://contrast' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='crop'>
      <soap12:operation soapAction='http://crop' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='customHsb'>
      <soap12:operation soapAction='http://customHsb' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='edgeDetection'>
      <soap12:operation soapAction='http://edgeDetection' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='gamma'>
      <soap12:operation soapAction='http://gamma' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='invert'>
      <soap12:operation soapAction='http://invert' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='levels'>
      <soap12:operation soapAction='http://levels' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='mosaic'>
      <soap12:operation soapAction='http://mosaic' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='noise'>
      <soap12:operation soapAction='http://noise' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='oil'>
      <soap12:operation soapAction='http://oil' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='padding'>
      <soap12:operation soapAction='http://padding' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='resize'>
      <soap12:operation soapAction='http://resize' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='rgbMixer'>
      <soap12:operation soapAction='http://rgbMixer' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='rotate'>
      <soap12:operation soapAction='http://rotate' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
  </binding>
  <service name='instafilterIo'>
    <documentation>an easy RESTful API for manipulating images and applying customizable filters in real time You can use the built in filters or create your own ones on top of our filters And not only filters includes resize rotate and crop functions among the others No monthly price Easy as per filter Maximum file size is MB</documentation>
    <port name='instafilterIoPort' binding='tns:instafilterIoBinding' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/'>
      <soap12:address location='http://instafilterIo' />
    </port>
  </service>
</definitions>