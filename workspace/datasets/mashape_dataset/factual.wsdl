<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<definitions targetNamespace='http://generatedWSDL.com/factual/' name='factual' xmlns='http://schemas.xmlsoap.org/wsdl/' xmlns:wsdl='http://schemas.xmlsoap.org/wsdl/' xmlns:tns='http://generatedWSDL.com/factual/'>
  <types>
    <xsd:schema targetNamespace='http://generatedWSDL.com/factual/' attributeFormDefault='unqualified' elementFormDefault='unqualified' xmlns:xsd='http://www.w3.org/2001/XMLSchema' xmlns:tns='http://generatedWSDL.com/factual/'>
      <xsd:element name='clearParameters'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='factualid' type='xsd:string' maxOccurs='unbounded' />
            <xsd:element name='viewid' type='xsd:string' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='clearResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='contextParameters'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='geo' type='xsd:string' maxOccurs='unbounded' />
            <xsd:element name='key' type='xsd:string' maxOccurs='unbounded' />
            <xsd:element name='select' type='xsd:string' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='contextResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='diffsParameters'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='end' type='xsd:string' maxOccurs='unbounded' />
            <xsd:element name='start' type='xsd:string' maxOccurs='unbounded' />
            <xsd:element name='viewname' type='xsd:string' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='diffsResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='facetsParameters'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='filters' type='xsd:string' maxOccurs='unbounded' />
            <xsd:element name='geo' type='xsd:string' maxOccurs='unbounded' />
            <xsd:element name='includecount' type='xsd:string' maxOccurs='unbounded' />
            <xsd:element name='key' type='xsd:string' maxOccurs='unbounded' />
            <xsd:element name='limit' type='xsd:string' maxOccurs='unbounded' />
            <xsd:element name='mincount' type='xsd:string' maxOccurs='unbounded' />
            <xsd:element name='q' type='xsd:string' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='facetsResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='flagResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='geocodeParameters'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='geo' type='xsd:string' maxOccurs='unbounded' />
            <xsd:element name='key' type='xsd:string' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='geocodeResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='matchParameters'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='key' type='xsd:string' maxOccurs='unbounded' />
            <xsd:element name='values' type='xsd:string' maxOccurs='unbounded' />
            <xsd:element name='viewName' type='xsd:string' maxOccurs='unbounded' />
            <xsd:element name='viewname' type='xsd:string' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='matchResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='monetizeParameters'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='filters' type='xsd:string' maxOccurs='unbounded' />
            <xsd:element name='geo' type='xsd:string' maxOccurs='unbounded' />
            <xsd:element name='includecount' type='xsd:string' maxOccurs='unbounded' />
            <xsd:element name='limit' type='xsd:string' maxOccurs='unbounded' />
            <xsd:element name='offset' type='xsd:string' maxOccurs='unbounded' />
            <xsd:element name='q' type='xsd:string' maxOccurs='unbounded' />
            <xsd:element name='select' type='xsd:string' maxOccurs='unbounded' />
            <xsd:element name='sort' type='xsd:string' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='monetizeResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='multiParameters'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='key' type='xsd:string' maxOccurs='unbounded' />
            <xsd:element name='queries' type='xsd:string' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='multiResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='placesResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='readParameters'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='factualid' type='xsd:string' maxOccurs='unbounded' />
            <xsd:element name='filters' type='xsd:string' maxOccurs='unbounded' />
            <xsd:element name='geo' type='xsd:string' maxOccurs='unbounded' />
            <xsd:element name='includecount' type='xsd:string' maxOccurs='unbounded' />
            <xsd:element name='key' type='xsd:string' maxOccurs='unbounded' />
            <xsd:element name='limit' type='xsd:string' maxOccurs='unbounded' />
            <xsd:element name='offset' type='xsd:string' maxOccurs='unbounded' />
            <xsd:element name='q' type='xsd:string' maxOccurs='unbounded' />
            <xsd:element name='select' type='xsd:string' maxOccurs='unbounded' />
            <xsd:element name='sort' type='xsd:string' maxOccurs='unbounded' />
            <xsd:element name='tableid' type='xsd:string' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='readResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='resolveParameters'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='debug' type='xsd:string' maxOccurs='unbounded' />
            <xsd:element name='values' type='xsd:string' maxOccurs='unbounded' />
            <xsd:element name='viewName' type='xsd:string' maxOccurs='unbounded' />
            <xsd:element name='viewname' type='xsd:string' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='resolveResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='schemaParameters'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='key' type='xsd:string' maxOccurs='unbounded' />
            <xsd:element name='viewid' type='xsd:string' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='schemaResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='submitParameters'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='clearblanks' type='xsd:string' maxOccurs='unbounded' />
            <xsd:element name='comment' type='xsd:string' maxOccurs='unbounded' />
            <xsd:element name='reference' type='xsd:string' maxOccurs='unbounded' />
            <xsd:element name='strict' type='xsd:string' maxOccurs='unbounded' />
            <xsd:element name='user' type='xsd:string' maxOccurs='unbounded' />
            <xsd:element name='values' type='xsd:string' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='submitResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
    </xsd:schema>
  </types>
  <message name='clearRequestMessage'>
    <part name='parameters' element='tns:clearParameters' />
  </message>
  <message name='clearResponseMessage'>
    <part name='response' element='tns:clearResponse' />
  </message>
  <message name='contextRequestMessage'>
    <part name='parameters' element='tns:contextParameters' />
  </message>
  <message name='contextResponseMessage'>
    <part name='response' element='tns:contextResponse' />
  </message>
  <message name='diffsRequestMessage'>
    <part name='parameters' element='tns:diffsParameters' />
  </message>
  <message name='diffsResponseMessage'>
    <part name='response' element='tns:diffsResponse' />
  </message>
  <message name='facetsRequestMessage'>
    <part name='parameters' element='tns:facetsParameters' />
  </message>
  <message name='facetsResponseMessage'>
    <part name='response' element='tns:facetsResponse' />
  </message>
  <message name='flagRequestMessage' />
  <message name='flagResponseMessage'>
    <part name='response' element='tns:flagResponse' />
  </message>
  <message name='geocodeRequestMessage'>
    <part name='parameters' element='tns:geocodeParameters' />
  </message>
  <message name='geocodeResponseMessage'>
    <part name='response' element='tns:geocodeResponse' />
  </message>
  <message name='matchRequestMessage'>
    <part name='parameters' element='tns:matchParameters' />
  </message>
  <message name='matchResponseMessage'>
    <part name='response' element='tns:matchResponse' />
  </message>
  <message name='monetizeRequestMessage'>
    <part name='parameters' element='tns:monetizeParameters' />
  </message>
  <message name='monetizeResponseMessage'>
    <part name='response' element='tns:monetizeResponse' />
  </message>
  <message name='multiRequestMessage'>
    <part name='parameters' element='tns:multiParameters' />
  </message>
  <message name='multiResponseMessage'>
    <part name='response' element='tns:multiResponse' />
  </message>
  <message name='placesRequestMessage' />
  <message name='placesResponseMessage'>
    <part name='response' element='tns:placesResponse' />
  </message>
  <message name='readRequestMessage'>
    <part name='parameters' element='tns:readParameters' />
  </message>
  <message name='readResponseMessage'>
    <part name='response' element='tns:readResponse' />
  </message>
  <message name='resolveRequestMessage'>
    <part name='parameters' element='tns:resolveParameters' />
  </message>
  <message name='resolveResponseMessage'>
    <part name='response' element='tns:resolveResponse' />
  </message>
  <message name='schemaRequestMessage'>
    <part name='parameters' element='tns:schemaParameters' />
  </message>
  <message name='schemaResponseMessage'>
    <part name='response' element='tns:schemaResponse' />
  </message>
  <message name='submitRequestMessage'>
    <part name='parameters' element='tns:submitParameters' />
  </message>
  <message name='submitResponseMessage'>
    <part name='response' element='tns:submitResponse' />
  </message>
  <portType name='factualPortType'>
    <operation name='clear'>
      <documentation>this method enables clearing existing attributes in an entity Clearing an attribute attempts to reset whatever value it currently contains to a blank state</documentation>
      <input message='tns:clearRequestMessage' name='clearInput' />
      <output message='tns:clearResponseMessage' name='clearOutput' />
    </operation>
    <operation name='context'>
      <documentation>geopulse Context provides point based access to geographic area attributes you provide a long lat coordinate pair we provide everything we can know about the immediate geography The Geopulse Context API is made up of several pulses Pulses are geo referenced attributes generated by Factual sourced from openly available content such as the US Census or provided to Factual by proprietary third parties We currently provide Factual Commercial Density Relative density of businesses near a location Factual Commercial Profile Types of businesses near a location Containing Metro Area MSA in the US Commercial Residential Ratio the relative proportion of business to residential addresses Demographics Age gender race populations statistics and median household income US only We have a great Geopulse Context demo online which shows this content visually Available pulses are outlined in detail below</documentation>
      <input message='tns:contextRequestMessage' name='contextInput' />
      <output message='tns:contextResponseMessage' name='contextOutput' />
    </operation>
    <operation name='diffs'>
      <documentation>factual makes available data downloads the entirety of a table in zipped CSV format While data downloads implemented on your own servers are highly convenient for some use cases they divorce your copy of the data from our continuously updated canonical dataset In contract users of the Factual API always have access to the freshest possible data The Factual Diffs API solves this issue by perpetuating atomic changes to the Factual dataset disconnecting your update schedule from our own and guaranteeing a current and timely implementation of Factual data on your local server Note the Diffs API is only available to users with download licenses Please contact Factual if you are interested in using this API</documentation>
      <input message='tns:diffsRequestMessage' name='diffsInput' />
      <output message='tns:diffsResponseMessage' name='diffsOutput' />
    </operation>
    <operation name='facets'>
      <documentation>the facets API call enables your to return row counts for Factual tables grouped by facets of the data For example you may want to query all businesses within mile of a location and for a count of those businesses by category Not all fields are configured to return facet counts To determine what fields you can return facets for use the schema call The faceted attribute of the schema will let you know</documentation>
      <input message='tns:facetsRequestMessage' name='facetsInput' />
      <output message='tns:facetsResponseMessage' name='facetsOutput' />
    </operation>
    <operation name='flag'>
      <documentation>aPI DOC MISSING URL INFORMATION This method enables flagging problematic rows in Factual tables Use this method if you are requesting for an entity to be deleted or merged into a duplicate record</documentation>
      <input message='tns:flagRequestMessage' name='flagInput' />
      <output message='tns:flagResponseMessage' name='flagOutput' />
    </operation>
    <operation name='geocode'>
      <documentation>a reverse geocoder you provide us with a longitude and latitude we ll return the nearest valid address Caveats The service is most accurate and inclusive in the US Addresses will not be returned where we do not have supporting address level data This service finds the nearest address this may or may not be a business To find the nearest business use our Global Places API</documentation>
      <input message='tns:geocodeRequestMessage' name='geocodeInput' />
      <output message='tns:geocodeResponseMessage' name='geocodeOutput' />
    </operation>
    <operation name='match'>
      <documentation>match your data to Factual s The Factual Match endpoint will simply return the Factual ID of the data that matches your data we return no data if we cannot identify your entity unequivocally If you require both the Factual ID and entity data for the place see Resolve</documentation>
      <input message='tns:matchRequestMessage' name='matchInput' />
      <output message='tns:matchResponseMessage' name='matchOutput' />
    </operation>
    <operation name='monetize'>
      <documentation>the Monetize API enables you to access offers that Factual has aggregated from various third party offer originators currently Groupon LivingSocial Yelp GrubHub and Signpost and earn money based on conversions The way it works is Factual snaps offers to Factual Places These offers and related places are exposed in the Monetize API which is accessible through the same API structure as Factual s Read API You can graphically browse the offers here As your users convert i e purchase a deal order from an online menu Factual will relay to you a healthy commission from the third party offer originators To be clear such payment is based on the actual conversions driven by a given developer Registering as an Affilliate Developers can access the Monetize API free of charge but Factual will not pay out earnings until the developer has registered with us Signing up for payments is pretty painless just contact us and we ll send short contract to capture your info and the payment terms Note also that we will not expose the LivingSocial offers until you have been approved by LivingSocial to incorporate their offers in your application this is a fast process and it will be turned around quickly once you register Finding Deals The Monetize API works exactly like Factual s Read API This means you can employ the same operators you are used on Factual Global Place such as Geo Filters Row Filters i e parametric search an Full Text Search We ve listed some sample queries below to get you started</documentation>
      <input message='tns:monetizeRequestMessage' name='monetizeInput' />
      <output message='tns:monetizeResponseMessage' name='monetizeOutput' />
    </operation>
    <operation name='multi'>
      <documentation>the multi API request enables making multiple API requests on the same connection</documentation>
      <input message='tns:multiRequestMessage' name='multiInput' />
      <output message='tns:multiResponseMessage' name='multiOutput' />
    </operation>
    <operation name='places'>
      <documentation></documentation>
      <input message='tns:placesRequestMessage' name='placesInput' />
      <output message='tns:placesResponseMessage' name='placesOutput' />
    </operation>
    <operation name='read'>
      <documentation>use the read call to query from tables using any combination of full text parametric or geo lat lng searches</documentation>
      <input message='tns:readRequestMessage' name='readInput' />
      <output message='tns:readResponseMessage' name='readOutput' />
    </operation>
    <operation name='resolve'>
      <documentation>use Resolve to enrich your data and match it against Factual s For simply mapping your data to Factual s see Match</documentation>
      <input message='tns:resolveRequestMessage' name='resolveInput' />
      <output message='tns:resolveResponseMessage' name='resolveOutput' />
    </operation>
    <operation name='schema'>
      <documentation>this method returns the schema for a Factual table view The schema includes Table view meta data name description list of fields schema version and whether or not the table is geo and or full text searchable Field meta data for each field name optional aliase s datatype whether the field is supports full text search facets or writes</documentation>
      <input message='tns:schemaRequestMessage' name='schemaInput' />
      <output message='tns:schemaResponseMessage' name='schemaOutput' />
    </operation>
    <operation name='submit'>
      <documentation>this method enables submitting edits to existing rows and or submitting new rows of data in Factual tables For information on deleting records see flag For information on removing data from a single attribute of an existing row of data see clear Submit Endpoint You may upsert with or without the factual id Include the factual id to update an extant entity Do not include the ID if you are attempting to write a new entity or do not know if one already exists Please use the us sandbox table for testing submissions</documentation>
      <input message='tns:submitRequestMessage' name='submitInput' />
      <output message='tns:submitResponseMessage' name='submitOutput' />
    </operation>
  </portType>
  <binding name='factualBinding' type='tns:factualPortType'>
    <operation name='clear'>
      <soap12:operation soapAction='http://clear' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' parts='parameters' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='context'>
      <soap12:operation soapAction='http://context' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' parts='parameters' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='diffs'>
      <soap12:operation soapAction='http://diffs' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' parts='parameters' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='facets'>
      <soap12:operation soapAction='http://facets' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' parts='parameters' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='flag'>
      <soap12:operation soapAction='http://flag' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='geocode'>
      <soap12:operation soapAction='http://geocode' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' parts='parameters' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='match'>
      <soap12:operation soapAction='http://match' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' parts='parameters' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='monetize'>
      <soap12:operation soapAction='http://monetize' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' parts='parameters' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='multi'>
      <soap12:operation soapAction='http://multi' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' parts='parameters' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='places'>
      <soap12:operation soapAction='http://places' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='read'>
      <soap12:operation soapAction='http://read' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' parts='parameters' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='resolve'>
      <soap12:operation soapAction='http://resolve' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' parts='parameters' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='schema'>
      <soap12:operation soapAction='http://schema' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' parts='parameters' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='submit'>
      <soap12:operation soapAction='http://submit' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' parts='parameters' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
  </binding>
  <service name='factual'>
    <documentation>factual s location platform enriches mobile location signals with definitive global data enabling personalized and contextually relevant mobile experiences Built from billions of inputs the data is constantly updated by Factual s real time data stack</documentation>
    <port name='factualPort' binding='tns:factualBinding' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/'>
      <soap12:address location='http://factual' />
    </port>
  </service>
</definitions>