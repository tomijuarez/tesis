<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<definitions targetNamespace='http://generatedWSDL.com/knowvent/' name='knowvent' xmlns='http://schemas.xmlsoap.org/wsdl/' xmlns:wsdl='http://schemas.xmlsoap.org/wsdl/' xmlns:tns='http://generatedWSDL.com/knowvent/'>
  <types>
    <xsd:schema targetNamespace='http://generatedWSDL.com/knowvent/' attributeFormDefault='unqualified' elementFormDefault='unqualified' xmlns:xsd='http://www.w3.org/2001/XMLSchema' xmlns:tns='http://generatedWSDL.com/knowvent/'>
      <xsd:element name='reportingEventsbydaterangeParameters'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='enddate' type='xsd:string' maxOccurs='unbounded' />
            <xsd:element name='startdate' type='xsd:string' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='reportingEventsbydaterangeResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='eventsByEventtypeParameters'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='enddate' type='xsd:string' maxOccurs='unbounded' />
            <xsd:element name='eventtype' type='xsd:string' maxOccurs='unbounded' />
            <xsd:element name='startdate' type='xsd:string' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='eventsByEventtypeResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='eventsByLoggingCodeParameters'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='enddate' type='xsd:string' maxOccurs='unbounded' />
            <xsd:element name='loggingcode' type='xsd:string' maxOccurs='unbounded' />
            <xsd:element name='startdate' type='xsd:string' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='eventsByLoggingCodeResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='getEventParameters'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='eventid' type='xsd:string' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='getEventResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='LoggingCode' type='xsd:normalizedString' minOccurs='0' />
            <xsd:element name='Message' type='xsd:string' minOccurs='0' />
            <xsd:element name='EventType' type='xsd:normalizedString' minOccurs='0' />
            <xsd:element name='Metadata' type='xsd:string' minOccurs='0' />
            <xsd:element name='EventId' type='xsd:normalizedString' minOccurs='0' />
            <xsd:element name='CorrelationId' type='xsd:normalizedString' minOccurs='0' />
            <xsd:element name='Source' type='xsd:normalizedString' minOccurs='0' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='getStatusesResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='helloworldResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='Status' type='xsd:normalizedString' minOccurs='0' />
            <xsd:element name='Message' type='xsd:normalizedString' minOccurs='0' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='publishEventResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='Status' type='xsd:normalizedString' minOccurs='0' />
            <xsd:element name='Message' type='xsd:normalizedString' minOccurs='0' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='sendPulseResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='Status' type='xsd:normalizedString' minOccurs='0' />
            <xsd:element name='Message' type='xsd:normalizedString' minOccurs='0' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='setstatusResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='Status' type='xsd:normalizedString' minOccurs='0' />
            <xsd:element name='Message' type='xsd:normalizedString' minOccurs='0' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
    </xsd:schema>
  </types>
  <message name='reportingEventsbydaterangeRequestMessage'>
    <part name='parameters' element='tns:reportingEventsbydaterangeParameters' />
  </message>
  <message name='reportingEventsbydaterangeResponseMessage'>
    <part name='response' element='tns:reportingEventsbydaterangeResponse' />
  </message>
  <message name='eventsByEventtypeRequestMessage'>
    <part name='parameters' element='tns:eventsByEventtypeParameters' />
  </message>
  <message name='eventsByEventtypeResponseMessage'>
    <part name='response' element='tns:eventsByEventtypeResponse' />
  </message>
  <message name='eventsByLoggingCodeRequestMessage'>
    <part name='parameters' element='tns:eventsByLoggingCodeParameters' />
  </message>
  <message name='eventsByLoggingCodeResponseMessage'>
    <part name='response' element='tns:eventsByLoggingCodeResponse' />
  </message>
  <message name='getEventRequestMessage'>
    <part name='parameters' element='tns:getEventParameters' />
  </message>
  <message name='getEventResponseMessage'>
    <part name='response' element='tns:getEventResponse' />
  </message>
  <message name='getStatusesRequestMessage' />
  <message name='getStatusesResponseMessage'>
    <part name='response' element='tns:getStatusesResponse' />
  </message>
  <message name='helloworldRequestMessage' />
  <message name='helloworldResponseMessage'>
    <part name='response' element='tns:helloworldResponse' />
  </message>
  <message name='publishEventRequestMessage' />
  <message name='publishEventResponseMessage'>
    <part name='response' element='tns:publishEventResponse' />
  </message>
  <message name='sendPulseRequestMessage' />
  <message name='sendPulseResponseMessage'>
    <part name='response' element='tns:sendPulseResponse' />
  </message>
  <message name='setstatusRequestMessage' />
  <message name='setstatusResponseMessage'>
    <part name='response' element='tns:setstatusResponse' />
  </message>
  <portType name='knowventPortType'>
    <operation name='reportingEventsbydaterange'>
      <documentation>used to pull event data based on a date range</documentation>
      <input message='tns:reportingEventsbydaterangeRequestMessage' name='reportingEventsbydaterangeInput' />
      <output message='tns:reportingEventsbydaterangeResponseMessage' name='reportingEventsbydaterangeOutput' />
    </operation>
    <operation name='eventsByEventtype'>
      <documentation>used to pull event data based on a date range and event type</documentation>
      <input message='tns:eventsByEventtypeRequestMessage' name='eventsByEventtypeInput' />
      <output message='tns:eventsByEventtypeResponseMessage' name='eventsByEventtypeOutput' />
    </operation>
    <operation name='eventsByLoggingCode'>
      <documentation>used to pull event data based on a date range and Logging Code</documentation>
      <input message='tns:eventsByLoggingCodeRequestMessage' name='eventsByLoggingCodeInput' />
      <output message='tns:eventsByLoggingCodeResponseMessage' name='eventsByLoggingCodeOutput' />
    </operation>
    <operation name='getEvent'>
      <documentation>if you need to get details on a specific event this event accepts an eventId as query string parameter</documentation>
      <input message='tns:getEventRequestMessage' name='getEventInput' />
      <output message='tns:getEventResponseMessage' name='getEventOutput' />
    </operation>
    <operation name='getStatuses'>
      <documentation>allows you to check on the health of your processes</documentation>
      <input message='tns:getStatusesRequestMessage' name='getStatusesInput' />
      <output message='tns:getStatusesResponseMessage' name='getStatusesOutput' />
    </operation>
    <operation name='helloworld'>
      <documentation>getting Started Quickly with HelloWorld</documentation>
      <input message='tns:helloworldRequestMessage' name='helloworldInput' />
      <output message='tns:helloworldResponseMessage' name='helloworldOutput' />
    </operation>
    <operation name='publishEvent'>
      <documentation>used to publish an event This is the heart of the event publishing platform</documentation>
      <input message='tns:publishEventRequestMessage' name='publishEventInput' />
      <output message='tns:publishEventResponseMessage' name='publishEventOutput' />
    </operation>
    <operation name='sendPulse'>
      <documentation>used to keep Knowvent informed that your critical processes are running</documentation>
      <input message='tns:sendPulseRequestMessage' name='sendPulseInput' />
      <output message='tns:sendPulseResponseMessage' name='sendPulseOutput' />
    </operation>
    <operation name='setstatus'>
      <documentation>used to update knowvent when a process starts or shuts down gracefully</documentation>
      <input message='tns:setstatusRequestMessage' name='setstatusInput' />
      <output message='tns:setstatusResponseMessage' name='setstatusOutput' />
    </operation>
  </portType>
  <binding name='knowventBinding' type='tns:knowventPortType'>
    <operation name='reportingEventsbydaterange'>
      <soap12:operation soapAction='http://reportingEventsbydaterange' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' parts='parameters' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='eventsByEventtype'>
      <soap12:operation soapAction='http://eventsByEventtype' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' parts='parameters' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='eventsByLoggingCode'>
      <soap12:operation soapAction='http://eventsByLoggingCode' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' parts='parameters' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='getEvent'>
      <soap12:operation soapAction='http://getEvent' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' parts='parameters' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='getStatuses'>
      <soap12:operation soapAction='http://getStatuses' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='helloworld'>
      <soap12:operation soapAction='http://helloworld' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='publishEvent'>
      <soap12:operation soapAction='http://publishEvent' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='sendPulse'>
      <soap12:operation soapAction='http://sendPulse' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='setstatus'>
      <soap12:operation soapAction='http://setstatus' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
  </binding>
  <service name='knowvent'>
    <documentation>knowvent s API is a cloud based heartbeat monitor and notifications hub for your business With Knowvent developers can easily publish events to the business Business managers can subscribe to those events they care the most about With Knowvent email notifications are a thing of the past</documentation>
    <port name='knowventPort' binding='tns:knowventBinding' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/'>
      <soap12:address location='http://knowvent' />
    </port>
  </service>
</definitions>