<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<definitions targetNamespace='http://generatedWSDL.com/datumbox/' name='datumbox' xmlns='http://schemas.xmlsoap.org/wsdl/' xmlns:wsdl='http://schemas.xmlsoap.org/wsdl/' xmlns:tns='http://generatedWSDL.com/datumbox/'>
  <types>
    <xsd:schema targetNamespace='http://generatedWSDL.com/datumbox/' attributeFormDefault='unqualified' elementFormDefault='unqualified' xmlns:xsd='http://www.w3.org/2001/XMLSchema' xmlns:tns='http://generatedWSDL.com/datumbox/'>
      <xsd:element name='postAdultcontentdetectionJsonResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='postCommercialdetectionJsonResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='postDocumentsimilarityJsonResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='postEducationaldetectionJsonResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='postGenderdetectionJsonResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='postKeywordextractionJsonResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='postLanguagedetectionJsonResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='postReadabilityassessmentJsonResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='postSentimentanalysisJsonResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='postSpamdetectionJsonResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='postSubjectivityanalysisJsonResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='postTextextractionJsonResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='postTopicclassificationJsonResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='postTwittersentimentanalysisJsonResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
    </xsd:schema>
  </types>
  <message name='postAdultcontentdetectionJsonRequestMessage' />
  <message name='postAdultcontentdetectionJsonResponseMessage'>
    <part name='response' element='tns:postAdultcontentdetectionJsonResponse' />
  </message>
  <message name='postCommercialdetectionJsonRequestMessage' />
  <message name='postCommercialdetectionJsonResponseMessage'>
    <part name='response' element='tns:postCommercialdetectionJsonResponse' />
  </message>
  <message name='postDocumentsimilarityJsonRequestMessage' />
  <message name='postDocumentsimilarityJsonResponseMessage'>
    <part name='response' element='tns:postDocumentsimilarityJsonResponse' />
  </message>
  <message name='postEducationaldetectionJsonRequestMessage' />
  <message name='postEducationaldetectionJsonResponseMessage'>
    <part name='response' element='tns:postEducationaldetectionJsonResponse' />
  </message>
  <message name='postGenderdetectionJsonRequestMessage' />
  <message name='postGenderdetectionJsonResponseMessage'>
    <part name='response' element='tns:postGenderdetectionJsonResponse' />
  </message>
  <message name='postKeywordextractionJsonRequestMessage' />
  <message name='postKeywordextractionJsonResponseMessage'>
    <part name='response' element='tns:postKeywordextractionJsonResponse' />
  </message>
  <message name='postLanguagedetectionJsonRequestMessage' />
  <message name='postLanguagedetectionJsonResponseMessage'>
    <part name='response' element='tns:postLanguagedetectionJsonResponse' />
  </message>
  <message name='postReadabilityassessmentJsonRequestMessage' />
  <message name='postReadabilityassessmentJsonResponseMessage'>
    <part name='response' element='tns:postReadabilityassessmentJsonResponse' />
  </message>
  <message name='postSentimentanalysisJsonRequestMessage' />
  <message name='postSentimentanalysisJsonResponseMessage'>
    <part name='response' element='tns:postSentimentanalysisJsonResponse' />
  </message>
  <message name='postSpamdetectionJsonRequestMessage' />
  <message name='postSpamdetectionJsonResponseMessage'>
    <part name='response' element='tns:postSpamdetectionJsonResponse' />
  </message>
  <message name='postSubjectivityanalysisJsonRequestMessage' />
  <message name='postSubjectivityanalysisJsonResponseMessage'>
    <part name='response' element='tns:postSubjectivityanalysisJsonResponse' />
  </message>
  <message name='postTextextractionJsonRequestMessage' />
  <message name='postTextextractionJsonResponseMessage'>
    <part name='response' element='tns:postTextextractionJsonResponse' />
  </message>
  <message name='postTopicclassificationJsonRequestMessage' />
  <message name='postTopicclassificationJsonResponseMessage'>
    <part name='response' element='tns:postTopicclassificationJsonResponse' />
  </message>
  <message name='postTwittersentimentanalysisJsonRequestMessage' />
  <message name='postTwittersentimentanalysisJsonResponseMessage'>
    <part name='response' element='tns:postTwittersentimentanalysisJsonResponse' />
  </message>
  <portType name='datumboxPortType'>
    <operation name='postAdultcontentdetectionJson'>
      <documentation>the Adult Content Detection function classifies the documents as adult or noadult based on their context It can be used to detect whether a document contains content unsuitable for minors</documentation>
      <input message='tns:postAdultcontentdetectionJsonRequestMessage' name='postAdultcontentdetectionJsonInput' />
      <output message='tns:postAdultcontentdetectionJsonResponseMessage' name='postAdultcontentdetectionJsonOutput' />
    </operation>
    <operation name='postCommercialdetectionJson'>
      <documentation>the Commercial Detection function labels the documents as commercial or non commercial based on their keywords and expressions It can be used to detect whether a website is commercial or not</documentation>
      <input message='tns:postCommercialdetectionJsonRequestMessage' name='postCommercialdetectionJsonInput' />
      <output message='tns:postCommercialdetectionJsonResponseMessage' name='postCommercialdetectionJsonOutput' />
    </operation>
    <operation name='postDocumentsimilarityJson'>
      <documentation>the Document Similarity function estimates the degree of similarity between two documents It can be used to detect duplicate webpages or detect plagiarism</documentation>
      <input message='tns:postDocumentsimilarityJsonRequestMessage' name='postDocumentsimilarityJsonInput' />
      <output message='tns:postDocumentsimilarityJsonResponseMessage' name='postDocumentsimilarityJsonOutput' />
    </operation>
    <operation name='postEducationaldetectionJson'>
      <documentation>the Educational Detection function classifies the documents as educational or non educational based on their context It can be used to detect whether a website is educational or not</documentation>
      <input message='tns:postEducationaldetectionJsonRequestMessage' name='postEducationaldetectionJsonInput' />
      <output message='tns:postEducationaldetectionJsonResponseMessage' name='postEducationaldetectionJsonOutput' />
    </operation>
    <operation name='postGenderdetectionJson'>
      <documentation>the Gender Detection function identifies if a particular document is written by or targets to a man or a woman based on the context the words and the idioms found in the text</documentation>
      <input message='tns:postGenderdetectionJsonRequestMessage' name='postGenderdetectionJsonInput' />
      <output message='tns:postGenderdetectionJsonResponseMessage' name='postGenderdetectionJsonOutput' />
    </operation>
    <operation name='postKeywordextractionJson'>
      <documentation>the Keyword Extraction function enables you to extract from an arbitrary document all the keywords and word combinations along with their occurrences in the text</documentation>
      <input message='tns:postKeywordextractionJsonRequestMessage' name='postKeywordextractionJsonInput' />
      <output message='tns:postKeywordextractionJsonResponseMessage' name='postKeywordextractionJsonOutput' />
    </operation>
    <operation name='postLanguagedetectionJson'>
      <documentation>the Language Detection function identifies the natural language of the given document based on its words and context This classifier is able to detect different languages</documentation>
      <input message='tns:postLanguagedetectionJsonRequestMessage' name='postLanguagedetectionJsonInput' />
      <output message='tns:postLanguagedetectionJsonResponseMessage' name='postLanguagedetectionJsonOutput' />
    </operation>
    <operation name='postReadabilityassessmentJson'>
      <documentation>the Readability Assessment function determines the degree of readability of a document based on its terms and idioms The texts are classified as basic intermediate and advanced depending their difficulty</documentation>
      <input message='tns:postReadabilityassessmentJsonRequestMessage' name='postReadabilityassessmentJsonInput' />
      <output message='tns:postReadabilityassessmentJsonResponseMessage' name='postReadabilityassessmentJsonOutput' />
    </operation>
    <operation name='postSentimentanalysisJson'>
      <documentation>the Sentiment Analysis function classifies documents as positive negative or neutral lack of sentiment depending on whether they express a positive negative or neutral opinion</documentation>
      <input message='tns:postSentimentanalysisJsonRequestMessage' name='postSentimentanalysisJsonInput' />
      <output message='tns:postSentimentanalysisJsonResponseMessage' name='postSentimentanalysisJsonOutput' />
    </operation>
    <operation name='postSpamdetectionJson'>
      <documentation>the Spam Detection function labels documents as spam or nospam by taking into account their context It can be used to filter out spam emails and comments</documentation>
      <input message='tns:postSpamdetectionJsonRequestMessage' name='postSpamdetectionJsonInput' />
      <output message='tns:postSpamdetectionJsonResponseMessage' name='postSpamdetectionJsonOutput' />
    </operation>
    <operation name='postSubjectivityanalysisJson'>
      <documentation>the Subjectivity Analysis function categorizes documents as subjective or objective based on their writing style Texts that express personal opinions are labeled as subjective and the others as objective</documentation>
      <input message='tns:postSubjectivityanalysisJsonRequestMessage' name='postSubjectivityanalysisJsonInput' />
      <output message='tns:postSubjectivityanalysisJsonResponseMessage' name='postSubjectivityanalysisJsonOutput' />
    </operation>
    <operation name='postTextextractionJson'>
      <documentation>the Text Extraction function enables you to extract the important information from a given webpage Extracting the clear text of the documents is an important step before any other analysis</documentation>
      <input message='tns:postTextextractionJsonRequestMessage' name='postTextextractionJsonInput' />
      <output message='tns:postTextextractionJsonResponseMessage' name='postTextextractionJsonOutput' />
    </operation>
    <operation name='postTopicclassificationJson'>
      <documentation>the Subjectivity Analysis function categorizes documents as subjective or objective based on their writing style Texts that express personal opinions are labeled as subjective and the others as objective</documentation>
      <input message='tns:postTopicclassificationJsonRequestMessage' name='postTopicclassificationJsonInput' />
      <output message='tns:postTopicclassificationJsonResponseMessage' name='postTopicclassificationJsonOutput' />
    </operation>
    <operation name='postTwittersentimentanalysisJson'>
      <documentation>the Twitter Sentiment Analysis function allows you to perform Sentiment Analysis on Twitter It classifies the tweets as positive negative or neutral depending on their context</documentation>
      <input message='tns:postTwittersentimentanalysisJsonRequestMessage' name='postTwittersentimentanalysisJsonInput' />
      <output message='tns:postTwittersentimentanalysisJsonResponseMessage' name='postTwittersentimentanalysisJsonOutput' />
    </operation>
  </portType>
  <binding name='datumboxBinding' type='tns:datumboxPortType'>
    <operation name='postAdultcontentdetectionJson'>
      <soap12:operation soapAction='http://postAdultcontentdetectionJson' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='postCommercialdetectionJson'>
      <soap12:operation soapAction='http://postCommercialdetectionJson' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='postDocumentsimilarityJson'>
      <soap12:operation soapAction='http://postDocumentsimilarityJson' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='postEducationaldetectionJson'>
      <soap12:operation soapAction='http://postEducationaldetectionJson' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='postGenderdetectionJson'>
      <soap12:operation soapAction='http://postGenderdetectionJson' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='postKeywordextractionJson'>
      <soap12:operation soapAction='http://postKeywordextractionJson' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='postLanguagedetectionJson'>
      <soap12:operation soapAction='http://postLanguagedetectionJson' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='postReadabilityassessmentJson'>
      <soap12:operation soapAction='http://postReadabilityassessmentJson' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='postSentimentanalysisJson'>
      <soap12:operation soapAction='http://postSentimentanalysisJson' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='postSpamdetectionJson'>
      <soap12:operation soapAction='http://postSpamdetectionJson' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='postSubjectivityanalysisJson'>
      <soap12:operation soapAction='http://postSubjectivityanalysisJson' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='postTextextractionJson'>
      <soap12:operation soapAction='http://postTextextractionJson' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='postTopicclassificationJson'>
      <soap12:operation soapAction='http://postTopicclassificationJson' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='postTwittersentimentanalysisJson'>
      <soap12:operation soapAction='http://postTwittersentimentanalysisJson' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
  </binding>
  <service name='datumbox'>
    <documentation>machine Learning Made Simple Power up your own Intelligent Applications by using our cutting edge Machine Learning platform Sign up today and start building intelligent services with our powerful easy to use API</documentation>
    <port name='datumboxPort' binding='tns:datumboxBinding' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/'>
      <soap12:address location='http://datumbox' />
    </port>
  </service>
</definitions>