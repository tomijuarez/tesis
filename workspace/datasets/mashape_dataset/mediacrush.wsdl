<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<definitions targetNamespace='http://generatedWSDL.com/mediacrush/' name='mediacrush' xmlns='http://schemas.xmlsoap.org/wsdl/' xmlns:wsdl='http://schemas.xmlsoap.org/wsdl/' xmlns:tns='http://generatedWSDL.com/mediacrush/'>
  <types>
    <xsd:schema targetNamespace='http://generatedWSDL.com/mediacrush/' attributeFormDefault='unqualified' elementFormDefault='unqualified' xmlns:xsd='http://www.w3.org/2001/XMLSchema' xmlns:tns='http://generatedWSDL.com/mediacrush/'>
      <xsd:element name='apiHashParameters'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='hash' type='xsd:string' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='apiHashResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='original' type='xsd:normalizedString' minOccurs='0' />
            <xsd:element name='extras' minOccurs='0'>
              <xsd:complexType>
                <xsd:sequence minOccurs='1' maxOccurs='1'>
                  <xsd:element name='file' type='xsd:normalizedString' minOccurs='0' />
                  <xsd:element name='type' type='xsd:normalizedString' minOccurs='0' />
                </xsd:sequence>
              </xsd:complexType>
            </xsd:element>
            <xsd:element name='files' maxOccurs='unbounded'>
              <xsd:complexType>
                <xsd:sequence minOccurs='1' maxOccurs='1'>
                  <xsd:element name='file' type='xsd:normalizedString' minOccurs='0' />
                  <xsd:element name='type' type='xsd:normalizedString' minOccurs='0' />
                </xsd:sequence>
              </xsd:complexType>
            </xsd:element>
            <xsd:element name='compression' type='xsd:decimal' minOccurs='0' />
            <xsd:element name='type' type='xsd:normalizedString' minOccurs='0' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='apiHashDeleteParameters'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='hash' type='xsd:string' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='apiHashDeleteResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='hash' type='xsd:normalizedString' minOccurs='0' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='apiHashExistsParameters'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='hash' type='xsd:string' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='apiHashExistsResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='exists' type='xsd:boolean' minOccurs='0' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='apiHashStatusParameters'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='hash' type='xsd:string' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='apiHashStatusResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='LxqXxVPAvqqB' minOccurs='0'>
              <xsd:complexType>
                <xsd:sequence minOccurs='1' maxOccurs='1'>
                  <xsd:element name='original' type='xsd:normalizedString' minOccurs='0' />
                  <xsd:element name='files' maxOccurs='unbounded'>
                    <xsd:complexType>
                      <xsd:sequence minOccurs='1' maxOccurs='1'>
                        <xsd:element name='file' type='xsd:normalizedString' minOccurs='0' />
                        <xsd:element name='type' type='xsd:normalizedString' minOccurs='0' />
                      </xsd:sequence>
                    </xsd:complexType>
                  </xsd:element>
                  <xsd:element name='compression' type='xsd:decimal' minOccurs='0' />
                  <xsd:element name='type' type='xsd:normalizedString' minOccurs='0' />
                </xsd:sequence>
              </xsd:complexType>
            </xsd:element>
            <xsd:element name='hash' type='xsd:normalizedString' minOccurs='0' />
            <xsd:element name='status' type='xsd:normalizedString' minOccurs='0' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='apiInfoParameters'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='list' type='xsd:string' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='apiInfoResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='CPvuR5lRhmS0' minOccurs='0'>
              <xsd:complexType>
                <xsd:sequence minOccurs='1' maxOccurs='1'>
                  <xsd:element name='original' type='xsd:normalizedString' minOccurs='0' />
                  <xsd:element name='extras' minOccurs='0'>
                    <xsd:complexType>
                      <xsd:sequence minOccurs='1' maxOccurs='1'>
                        <xsd:element name='file' type='xsd:normalizedString' minOccurs='0' />
                        <xsd:element name='type' type='xsd:normalizedString' minOccurs='0' />
                      </xsd:sequence>
                    </xsd:complexType>
                  </xsd:element>
                  <xsd:element name='files' maxOccurs='unbounded'>
                    <xsd:complexType>
                      <xsd:sequence minOccurs='1' maxOccurs='1'>
                        <xsd:element name='file' type='xsd:normalizedString' minOccurs='0' />
                        <xsd:element name='type' type='xsd:normalizedString' minOccurs='0' />
                      </xsd:sequence>
                    </xsd:complexType>
                  </xsd:element>
                  <xsd:element name='compression' type='xsd:decimal' minOccurs='0' />
                  <xsd:element name='type' type='xsd:normalizedString' minOccurs='0' />
                </xsd:sequence>
              </xsd:complexType>
            </xsd:element>
            <xsd:element name='tVWMM_ziA3nm' minOccurs='0'>
              <xsd:complexType>
                <xsd:sequence minOccurs='1' maxOccurs='1'>
                  <xsd:element name='original' type='xsd:normalizedString' minOccurs='0' />
                  <xsd:element name='extras' minOccurs='0'>
                    <xsd:complexType>
                      <xsd:sequence minOccurs='1' maxOccurs='1'>
                        <xsd:element name='file' type='xsd:normalizedString' minOccurs='0' />
                        <xsd:element name='type' type='xsd:normalizedString' minOccurs='0' />
                      </xsd:sequence>
                    </xsd:complexType>
                  </xsd:element>
                  <xsd:element name='files' maxOccurs='unbounded'>
                    <xsd:complexType>
                      <xsd:sequence minOccurs='1' maxOccurs='1'>
                        <xsd:element name='file' type='xsd:normalizedString' minOccurs='0' />
                        <xsd:element name='type' type='xsd:normalizedString' minOccurs='0' />
                      </xsd:sequence>
                    </xsd:complexType>
                  </xsd:element>
                  <xsd:element name='compression' type='xsd:decimal' minOccurs='0' />
                  <xsd:element name='type' type='xsd:normalizedString' minOccurs='0' />
                </xsd:sequence>
              </xsd:complexType>
            </xsd:element>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='apiUploadFileResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='hash' type='xsd:normalizedString' minOccurs='0' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='apiUploadUrlParameters'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='url' type='xsd:string' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='apiUploadUrlResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
    </xsd:schema>
  </types>
  <message name='apiHashRequestMessage'>
    <part name='parameters' element='tns:apiHashParameters' />
  </message>
  <message name='apiHashResponseMessage'>
    <part name='response' element='tns:apiHashResponse' />
  </message>
  <message name='apiHashDeleteRequestMessage'>
    <part name='parameters' element='tns:apiHashDeleteParameters' />
  </message>
  <message name='apiHashDeleteResponseMessage'>
    <part name='response' element='tns:apiHashDeleteResponse' />
  </message>
  <message name='apiHashExistsRequestMessage'>
    <part name='parameters' element='tns:apiHashExistsParameters' />
  </message>
  <message name='apiHashExistsResponseMessage'>
    <part name='response' element='tns:apiHashExistsResponse' />
  </message>
  <message name='apiHashStatusRequestMessage'>
    <part name='parameters' element='tns:apiHashStatusParameters' />
  </message>
  <message name='apiHashStatusResponseMessage'>
    <part name='response' element='tns:apiHashStatusResponse' />
  </message>
  <message name='apiInfoRequestMessage'>
    <part name='parameters' element='tns:apiInfoParameters' />
  </message>
  <message name='apiInfoResponseMessage'>
    <part name='response' element='tns:apiInfoResponse' />
  </message>
  <message name='apiUploadFileRequestMessage' />
  <message name='apiUploadFileResponseMessage'>
    <part name='response' element='tns:apiUploadFileResponse' />
  </message>
  <message name='apiUploadUrlRequestMessage'>
    <part name='parameters' element='tns:apiUploadUrlParameters' />
  </message>
  <message name='apiUploadUrlResponseMessage'>
    <part name='response' element='tns:apiUploadUrlResponse' />
  </message>
  <portType name='mediacrushPortType'>
    <operation name='apiHash'>
      <documentation>returns information about the file whose hash is hash When a file is uploaded to MediaCrush several associated files may be generated In the case of GIF files two video files are generated one with h mpeg and another with theora vorbis Some media will also have extra files In the case of uploaded videos we ll include an image png thumbnail file in the extras</documentation>
      <input message='tns:apiHashRequestMessage' name='apiHashInput' />
      <output message='tns:apiHashResponseMessage' name='apiHashOutput' />
    </operation>
    <operation name='apiHashDelete'>
      <documentation>returns a dictionary describing whether the delete operation succeeded In most cases it is easier to check the HTTP status code</documentation>
      <input message='tns:apiHashDeleteRequestMessage' name='apiHashDeleteInput' />
      <output message='tns:apiHashDeleteResponseMessage' name='apiHashDeleteOutput' />
    </operation>
    <operation name='apiHashExists'>
      <documentation>returns a dictionary answering the question of whether a hash exists</documentation>
      <input message='tns:apiHashExistsRequestMessage' name='apiHashExistsInput' />
      <output message='tns:apiHashExistsResponseMessage' name='apiHashExistsOutput' />
    </operation>
    <operation name='apiHashStatus'>
      <documentation>returns the processing status of the file identified by hash</documentation>
      <input message='tns:apiHashStatusRequestMessage' name='apiHashStatusInput' />
      <output message='tns:apiHashStatusResponseMessage' name='apiHashStatusOutput' />
    </operation>
    <operation name='apiInfo'>
      <documentation>returns an array of file objects</documentation>
      <input message='tns:apiInfoRequestMessage' name='apiInfoInput' />
      <output message='tns:apiInfoResponseMessage' name='apiInfoOutput' />
    </operation>
    <operation name='apiUploadFile'>
      <documentation>returns a dictionary with the hash of the file in case the upload succeeded a dictionary containing the error code if it did not succeed</documentation>
      <input message='tns:apiUploadFileRequestMessage' name='apiUploadFileInput' />
      <output message='tns:apiUploadFileResponseMessage' name='apiUploadFileOutput' />
    </operation>
    <operation name='apiUploadUrl'>
      <documentation>parameters url the URL from where to fetch the file to upload Returns the same as api upload file</documentation>
      <input message='tns:apiUploadUrlRequestMessage' name='apiUploadUrlInput' />
      <output message='tns:apiUploadUrlResponseMessage' name='apiUploadUrlOutput' />
    </operation>
  </portType>
  <binding name='mediacrushBinding' type='tns:mediacrushPortType'>
    <operation name='apiHash'>
      <soap12:operation soapAction='http://apiHash' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' parts='parameters' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='apiHashDelete'>
      <soap12:operation soapAction='http://apiHashDelete' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' parts='parameters' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='apiHashExists'>
      <soap12:operation soapAction='http://apiHashExists' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' parts='parameters' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='apiHashStatus'>
      <soap12:operation soapAction='http://apiHashStatus' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' parts='parameters' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='apiInfo'>
      <soap12:operation soapAction='http://apiInfo' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' parts='parameters' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='apiUploadFile'>
      <soap12:operation soapAction='http://apiUploadFile' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='apiUploadUrl'>
      <soap12:operation soapAction='http://apiUploadUrl' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' parts='parameters' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
  </binding>
  <service name='mediacrush'>
    <documentation>mediaCrush makes sharing media super fast by reducing the file size without sacrificing quality We ll losslessly compress images video and audio uploaded to our service We can get faster for some files</documentation>
    <port name='mediacrushPort' binding='tns:mediacrushBinding' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/'>
      <soap12:address location='http://mediacrush' />
    </port>
  </service>
</definitions>