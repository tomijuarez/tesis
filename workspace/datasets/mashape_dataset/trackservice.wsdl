<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<definitions targetNamespace='http://generatedWSDL.com/trackservice/' name='trackservice' xmlns='http://schemas.xmlsoap.org/wsdl/' xmlns:wsdl='http://schemas.xmlsoap.org/wsdl/' xmlns:tns='http://generatedWSDL.com/trackservice/'>
  <types>
    <xsd:schema targetNamespace='http://generatedWSDL.com/trackservice/' attributeFormDefault='unqualified' elementFormDefault='unqualified' xmlns:xsd='http://www.w3.org/2001/XMLSchema' xmlns:tns='http://generatedWSDL.com/trackservice/'>
      <xsd:element name='calculateDistanceJsonResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='Status' type='xsd:int' minOccurs='0' />
            <xsd:element name='FinishLocationMatchCode' type='xsd:int' minOccurs='0' />
            <xsd:element name='StartLocationMatchCode' type='xsd:int' minOccurs='0' />
            <xsd:element name='Time' type='xsd:int' minOccurs='0' />
            <xsd:element name='Distance' type='xsd:decimal' minOccurs='0' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='calculateDistanceXmlResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='calculateRouteJsonResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='calculateRouteXmlResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='calculateRoutesJsonResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='calculateRoutesXmlResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='creditRemainingJsonResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='Status' type='xsd:int' minOccurs='0' />
            <xsd:element name='Credit' type='xsd:int' minOccurs='0' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='creditRemainingXmlResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='dispatchJsonResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='Status' type='xsd:int' minOccurs='0' />
            <xsd:element name='Items' minOccurs='0'>
              <xsd:complexType>
                <xsd:sequence minOccurs='1' maxOccurs='1'>
                  <xsd:element name='Vehicle' minOccurs='0'>
                    <xsd:complexType>
                      <xsd:sequence minOccurs='1' maxOccurs='1'>
                        <xsd:element name='Group' type='xsd:string' minOccurs='0' />
                        <xsd:element name='Speed' type='xsd:int' minOccurs='0' />
                        <xsd:element name='Email' type='xsd:string' minOccurs='0' />
                        <xsd:element name='MaxStops' type='xsd:int' minOccurs='0' />
                        <xsd:element name='OnTheRoad' type='xsd:boolean' minOccurs='0' />
                        <xsd:element name='Name' type='xsd:normalizedString' minOccurs='0' />
                        <xsd:element name='FinishLocation' type='xsd:normalizedString' minOccurs='0' />
                        <xsd:element name='MaxWeight' type='xsd:decimal' minOccurs='0' />
                        <xsd:element name='StartLocation' type='xsd:normalizedString' minOccurs='0' />
                        <xsd:element name='MaxMinutes' type='xsd:int' minOccurs='0' />
                        <xsd:element name='Tin' type='xsd:normalizedString' minOccurs='0' />
                        <xsd:element name='MaxSkids' type='xsd:int' minOccurs='0' />
                        <xsd:element name='MaxVolume' type='xsd:decimal' minOccurs='0' />
                        <xsd:element name='Tout' type='xsd:normalizedString' minOccurs='0' />
                      </xsd:sequence>
                    </xsd:complexType>
                  </xsd:element>
                  <xsd:element name='Locations' maxOccurs='unbounded'>
                    <xsd:complexType>
                      <xsd:sequence minOccurs='1' maxOccurs='1'>
                        <xsd:element name='Description' type='xsd:normalizedString' minOccurs='0' />
                        <xsd:element name='Skids' type='xsd:int' minOccurs='0' />
                        <xsd:element name='Address' minOccurs='0'>
                          <xsd:complexType>
                            <xsd:sequence minOccurs='1' maxOccurs='1'>
                              <xsd:element name='State' type='xsd:string' minOccurs='0' />
                              <xsd:element name='Street' type='xsd:string' minOccurs='0' />
                              <xsd:element name='PostalCode' type='xsd:string' minOccurs='0' />
                              <xsd:element name='Country' type='xsd:string' minOccurs='0' />
                              <xsd:element name='City' type='xsd:string' minOccurs='0' />
                            </xsd:sequence>
                          </xsd:complexType>
                        </xsd:element>
                        <xsd:element name='TimeConstraintDeparture2' type='xsd:normalizedString' minOccurs='0' />
                        <xsd:element name='Priority' type='xsd:int' minOccurs='0' />
                        <xsd:element name='Time' type='xsd:int' minOccurs='0' />
                        <xsd:element name='Weight' type='xsd:decimal' minOccurs='0' />
                        <xsd:element name='Name' type='xsd:normalizedString' minOccurs='0' />
                        <xsd:element name='CanArriveEarly' type='xsd:boolean' minOccurs='0' />
                        <xsd:element name='Vehicle' type='xsd:string' minOccurs='0' />
                        <xsd:element name='MatchCode' type='xsd:int' minOccurs='0' />
                        <xsd:element name='TimeConstraintArrival2' type='xsd:normalizedString' minOccurs='0' />
                        <xsd:element name='Volume' type='xsd:decimal' minOccurs='0' />
                        <xsd:element name='Phone' type='xsd:string' minOccurs='0' />
                        <xsd:element name='Delivery' type='xsd:string' minOccurs='0' />
                        <xsd:element name='Wait' type='xsd:int' minOccurs='0' />
                        <xsd:element name='TimeConstraintDeparture' type='xsd:normalizedString' minOccurs='0' />
                        <xsd:element name='LatLong' minOccurs='0'>
                          <xsd:complexType>
                            <xsd:sequence minOccurs='1' maxOccurs='1'>
                              <xsd:element name='Latitude' type='xsd:decimal' minOccurs='0' />
                              <xsd:element name='Longitude' type='xsd:decimal' minOccurs='0' />
                            </xsd:sequence>
                          </xsd:complexType>
                        </xsd:element>
                        <xsd:element name='LocationType' type='xsd:int' minOccurs='0' />
                        <xsd:element name='Distance' type='xsd:decimal' minOccurs='0' />
                        <xsd:element name='TimeConstraintArrival' type='xsd:normalizedString' minOccurs='0' />
                      </xsd:sequence>
                    </xsd:complexType>
                  </xsd:element>
                </xsd:sequence>
              </xsd:complexType>
            </xsd:element>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='dispatchXmlResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='geocodeJsonResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='Status' type='xsd:int' minOccurs='0' />
            <xsd:element name='Items' maxOccurs='unbounded'>
              <xsd:complexType>
                <xsd:sequence minOccurs='1' maxOccurs='1'>
                  <xsd:element name='Address' minOccurs='0'>
                    <xsd:complexType>
                      <xsd:sequence minOccurs='1' maxOccurs='1'>
                        <xsd:element name='State' type='xsd:normalizedString' minOccurs='0' />
                        <xsd:element name='Street' type='xsd:string' minOccurs='0' />
                        <xsd:element name='PostalCode' type='xsd:int' minOccurs='0' />
                        <xsd:element name='Country' type='xsd:normalizedString' minOccurs='0' />
                        <xsd:element name='City' type='xsd:normalizedString' minOccurs='0' />
                      </xsd:sequence>
                    </xsd:complexType>
                  </xsd:element>
                  <xsd:element name='Locations' minOccurs='0'>
                    <xsd:complexType>
                      <xsd:sequence minOccurs='1' maxOccurs='1'>
                        <xsd:element name='Description' type='xsd:string' minOccurs='0' />
                        <xsd:element name='Skids' type='xsd:int' minOccurs='0' />
                        <xsd:element name='Address' minOccurs='0'>
                          <xsd:complexType>
                            <xsd:sequence minOccurs='1' maxOccurs='1'>
                              <xsd:element name='State' type='xsd:normalizedString' minOccurs='0' />
                              <xsd:element name='Street' type='xsd:string' minOccurs='0' />
                              <xsd:element name='PostalCode' type='xsd:int' minOccurs='0' />
                              <xsd:element name='Country' type='xsd:normalizedString' minOccurs='0' />
                              <xsd:element name='City' type='xsd:normalizedString' minOccurs='0' />
                            </xsd:sequence>
                          </xsd:complexType>
                        </xsd:element>
                        <xsd:element name='TimeConstraintDeparture2' type='xsd:normalizedString' minOccurs='0' />
                        <xsd:element name='Priority' type='xsd:int' minOccurs='0' />
                        <xsd:element name='Time' type='xsd:int' minOccurs='0' />
                        <xsd:element name='Weight' type='xsd:decimal' minOccurs='0' />
                        <xsd:element name='Name' type='xsd:normalizedString' minOccurs='0' />
                        <xsd:element name='CanArriveEarly' type='xsd:boolean' minOccurs='0' />
                        <xsd:element name='Vehicle' type='xsd:string' minOccurs='0' />
                        <xsd:element name='MatchCode' type='xsd:int' minOccurs='0' />
                        <xsd:element name='TimeConstraintArrival2' type='xsd:normalizedString' minOccurs='0' />
                        <xsd:element name='Volume' type='xsd:decimal' minOccurs='0' />
                        <xsd:element name='Phone' type='xsd:string' minOccurs='0' />
                        <xsd:element name='Delivery' type='xsd:string' minOccurs='0' />
                        <xsd:element name='Wait' type='xsd:int' minOccurs='0' />
                        <xsd:element name='TimeConstraintDeparture' type='xsd:normalizedString' minOccurs='0' />
                        <xsd:element name='LatLong' minOccurs='0'>
                          <xsd:complexType>
                            <xsd:sequence minOccurs='1' maxOccurs='1'>
                              <xsd:element name='Latitude' type='xsd:decimal' minOccurs='0' />
                              <xsd:element name='Longitude' type='xsd:decimal' minOccurs='0' />
                            </xsd:sequence>
                          </xsd:complexType>
                        </xsd:element>
                        <xsd:element name='LocationType' type='xsd:int' minOccurs='0' />
                        <xsd:element name='Distance' type='xsd:decimal' minOccurs='0' />
                        <xsd:element name='TimeConstraintArrival' type='xsd:normalizedString' minOccurs='0' />
                      </xsd:sequence>
                    </xsd:complexType>
                  </xsd:element>
                </xsd:sequence>
              </xsd:complexType>
            </xsd:element>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='geocodeXmlResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='loginJsonResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='Status' type='xsd:int' minOccurs='0' />
            <xsd:element name='Message' type='xsd:normalizedString' minOccurs='0' />
            <xsd:element name='Key' type='xsd:normalizedString' minOccurs='0' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='loginXmlResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
    </xsd:schema>
  </types>
  <message name='calculateDistanceJsonRequestMessage' />
  <message name='calculateDistanceJsonResponseMessage'>
    <part name='response' element='tns:calculateDistanceJsonResponse' />
  </message>
  <message name='calculateDistanceXmlRequestMessage' />
  <message name='calculateDistanceXmlResponseMessage'>
    <part name='response' element='tns:calculateDistanceXmlResponse' />
  </message>
  <message name='calculateRouteJsonRequestMessage' />
  <message name='calculateRouteJsonResponseMessage'>
    <part name='response' element='tns:calculateRouteJsonResponse' />
  </message>
  <message name='calculateRouteXmlRequestMessage' />
  <message name='calculateRouteXmlResponseMessage'>
    <part name='response' element='tns:calculateRouteXmlResponse' />
  </message>
  <message name='calculateRoutesJsonRequestMessage' />
  <message name='calculateRoutesJsonResponseMessage'>
    <part name='response' element='tns:calculateRoutesJsonResponse' />
  </message>
  <message name='calculateRoutesXmlRequestMessage' />
  <message name='calculateRoutesXmlResponseMessage'>
    <part name='response' element='tns:calculateRoutesXmlResponse' />
  </message>
  <message name='creditRemainingJsonRequestMessage' />
  <message name='creditRemainingJsonResponseMessage'>
    <part name='response' element='tns:creditRemainingJsonResponse' />
  </message>
  <message name='creditRemainingXmlRequestMessage' />
  <message name='creditRemainingXmlResponseMessage'>
    <part name='response' element='tns:creditRemainingXmlResponse' />
  </message>
  <message name='dispatchJsonRequestMessage' />
  <message name='dispatchJsonResponseMessage'>
    <part name='response' element='tns:dispatchJsonResponse' />
  </message>
  <message name='dispatchXmlRequestMessage' />
  <message name='dispatchXmlResponseMessage'>
    <part name='response' element='tns:dispatchXmlResponse' />
  </message>
  <message name='geocodeJsonRequestMessage' />
  <message name='geocodeJsonResponseMessage'>
    <part name='response' element='tns:geocodeJsonResponse' />
  </message>
  <message name='geocodeXmlRequestMessage' />
  <message name='geocodeXmlResponseMessage'>
    <part name='response' element='tns:geocodeXmlResponse' />
  </message>
  <message name='loginJsonRequestMessage' />
  <message name='loginJsonResponseMessage'>
    <part name='response' element='tns:loginJsonResponse' />
  </message>
  <message name='loginXmlRequestMessage' />
  <message name='loginXmlResponseMessage'>
    <part name='response' element='tns:loginXmlResponse' />
  </message>
  <portType name='trackservicePortType'>
    <operation name='calculateDistanceJson'>
      <documentation>use the following method to calculate distance and time</documentation>
      <input message='tns:calculateDistanceJsonRequestMessage' name='calculateDistanceJsonInput' />
      <output message='tns:calculateDistanceJsonResponseMessage' name='calculateDistanceJsonOutput' />
    </operation>
    <operation name='calculateDistanceXml'>
      <documentation>use the following method to calculate distance and time</documentation>
      <input message='tns:calculateDistanceXmlRequestMessage' name='calculateDistanceXmlInput' />
      <output message='tns:calculateDistanceXmlResponseMessage' name='calculateDistanceXmlOutput' />
    </operation>
    <operation name='calculateRouteJson'>
      <documentation>use the following URL template to get a route by specifying a series of locations A location is a specified geographical location defined by longitude and latitude that is used for navigational purposes The route includes information such as route instructions travel duration travel distance or transit information You can also request a set of route points</documentation>
      <input message='tns:calculateRouteJsonRequestMessage' name='calculateRouteJsonInput' />
      <output message='tns:calculateRouteJsonResponseMessage' name='calculateRouteJsonOutput' />
    </operation>
    <operation name='calculateRouteXml'>
      <documentation>use the following URL template to get a route by specifying a series of locations A location is a specified geographical location defined by longitude and latitude that is used for navigational purposes The route includes information such as route instructions travel duration travel distance or transit information You can also request a set of route points</documentation>
      <input message='tns:calculateRouteXmlRequestMessage' name='calculateRouteXmlInput' />
      <output message='tns:calculateRouteXmlResponseMessage' name='calculateRouteXmlOutput' />
    </operation>
    <operation name='calculateRoutesJson'>
      <documentation>use the following URL template to get multiple routes by specifying a series of locations A location is a specified geographical location defined by longitude and latitude that is used for navigational purposes Every route includes information such as route instructions travel duration travel distance or transit information You can also request a set of route points</documentation>
      <input message='tns:calculateRoutesJsonRequestMessage' name='calculateRoutesJsonInput' />
      <output message='tns:calculateRoutesJsonResponseMessage' name='calculateRoutesJsonOutput' />
    </operation>
    <operation name='calculateRoutesXml'>
      <documentation>use the following URL template to get multiple routes by specifying a series of locations A location is a specified geographical location defined by longitude and latitude that is used for navigational purposes Every route includes information such as route instructions travel duration travel distance or transit information You can also request a set of route points</documentation>
      <input message='tns:calculateRoutesXmlRequestMessage' name='calculateRoutesXmlInput' />
      <output message='tns:calculateRoutesXmlResponseMessage' name='calculateRoutesXmlOutput' />
    </operation>
    <operation name='creditRemainingJson'>
      <documentation>to get credit remaining you must send an empty post request to the following URL template</documentation>
      <input message='tns:creditRemainingJsonRequestMessage' name='creditRemainingJsonInput' />
      <output message='tns:creditRemainingJsonResponseMessage' name='creditRemainingJsonOutput' />
    </operation>
    <operation name='creditRemainingXml'>
      <documentation>to get credit remaining you must send an empty post request to the following URL template</documentation>
      <input message='tns:creditRemainingXmlRequestMessage' name='creditRemainingXmlInput' />
      <output message='tns:creditRemainingXmlResponseMessage' name='creditRemainingXmlOutput' />
    </operation>
    <operation name='dispatchJson'>
      <documentation>dispatch method can optimize s of stops using one or several vehicles You can use address or latitude longitude to define a location of a Vehicle and a Stop</documentation>
      <input message='tns:dispatchJsonRequestMessage' name='dispatchJsonInput' />
      <output message='tns:dispatchJsonResponseMessage' name='dispatchJsonOutput' />
    </operation>
    <operation name='dispatchXml'>
      <documentation>dispatch method can optimize s of stops using one or several vehicles You can use address or latitude longitude to define a location of a Vehicle and a Stop</documentation>
      <input message='tns:dispatchXmlRequestMessage' name='dispatchXmlInput' />
      <output message='tns:dispatchXmlResponseMessage' name='dispatchXmlOutput' />
    </operation>
    <operation name='geocodeJson'>
      <documentation>use the following method to get latitude and longitude coordinates for a location by specifying values such as a postal code and street address</documentation>
      <input message='tns:geocodeJsonRequestMessage' name='geocodeJsonInput' />
      <output message='tns:geocodeJsonResponseMessage' name='geocodeJsonOutput' />
    </operation>
    <operation name='geocodeXml'>
      <documentation>use the following method to get latitude and longitude coordinates for a location by specifying values such as a postal code and street address</documentation>
      <input message='tns:geocodeXmlRequestMessage' name='geocodeXmlInput' />
      <output message='tns:geocodeXmlResponseMessage' name='geocodeXmlOutput' />
    </operation>
    <operation name='loginJson'>
      <documentation>to access TrackService API you must use a key To get a key you must login or get a TrackService key in your account</documentation>
      <input message='tns:loginJsonRequestMessage' name='loginJsonInput' />
      <output message='tns:loginJsonResponseMessage' name='loginJsonOutput' />
    </operation>
    <operation name='loginXml'>
      <documentation>to access TrackService API you must use a key To get a key you must login or get a TrackService key in your account</documentation>
      <input message='tns:loginXmlRequestMessage' name='loginXmlInput' />
      <output message='tns:loginXmlResponseMessage' name='loginXmlOutput' />
    </operation>
  </portType>
  <binding name='trackserviceBinding' type='tns:trackservicePortType'>
    <operation name='calculateDistanceJson'>
      <soap12:operation soapAction='http://calculateDistanceJson' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='calculateDistanceXml'>
      <soap12:operation soapAction='http://calculateDistanceXml' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='calculateRouteJson'>
      <soap12:operation soapAction='http://calculateRouteJson' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='calculateRouteXml'>
      <soap12:operation soapAction='http://calculateRouteXml' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='calculateRoutesJson'>
      <soap12:operation soapAction='http://calculateRoutesJson' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='calculateRoutesXml'>
      <soap12:operation soapAction='http://calculateRoutesXml' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='creditRemainingJson'>
      <soap12:operation soapAction='http://creditRemainingJson' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='creditRemainingXml'>
      <soap12:operation soapAction='http://creditRemainingXml' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='dispatchJson'>
      <soap12:operation soapAction='http://dispatchJson' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='dispatchXml'>
      <soap12:operation soapAction='http://dispatchXml' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='geocodeJson'>
      <soap12:operation soapAction='http://geocodeJson' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='geocodeXml'>
      <soap12:operation soapAction='http://geocodeXml' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='loginJson'>
      <soap12:operation soapAction='http://loginJson' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='loginXml'>
      <soap12:operation soapAction='http://loginXml' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
  </binding>
  <service name='trackservice'>
    <documentation>route optimization dispatching of multiple vehicles and multiple stops Use TrackRoad API to optimize s of stops in seconds distance calculation turn by turn directions and geocoding Real time asset tracking two way texting are provided using either web interface free iPhone app or Android app Routing features include intelligent dispatching multiple region routing time window load capacity balancing auto address geocoding highlighted route maps and much more</documentation>
    <port name='trackservicePort' binding='tns:trackserviceBinding' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/'>
      <soap12:address location='http://trackservice' />
    </port>
  </service>
</definitions>