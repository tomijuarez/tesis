<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<definitions targetNamespace='http://generatedWSDL.com/betafaceAdvancedFaceRecognition/' name='betafaceAdvancedFaceRecognition' xmlns='http://schemas.xmlsoap.org/wsdl/' xmlns:wsdl='http://schemas.xmlsoap.org/wsdl/' xmlns:tns='http://generatedWSDL.com/betafaceAdvancedFaceRecognition/'>
  <types>
    <xsd:schema targetNamespace='http://generatedWSDL.com/betafaceAdvancedFaceRecognition/' attributeFormDefault='unqualified' elementFormDefault='unqualified' xmlns:xsd='http://www.w3.org/2001/XMLSchema' xmlns:tns='http://generatedWSDL.com/betafaceAdvancedFaceRecognition/'>
      <xsd:element name='getfaceimageResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='uid' type='xsd:normalizedString' minOccurs='0' />
            <xsd:element name='int_response' type='xsd:int' minOccurs='0' />
            <xsd:element name='face_info' minOccurs='0'>
              <xsd:complexType>
                <xsd:sequence minOccurs='1' maxOccurs='1'>
                  <xsd:element name='gender_confidence' type='xsd:decimal' minOccurs='0' />
                  <xsd:element name='image_uid' type='xsd:normalizedString' minOccurs='0' />
                  <xsd:element name='glasses_confidence' type='xsd:decimal' minOccurs='0' />
                  <xsd:element name='beard_confidence' type='xsd:decimal' minOccurs='0' />
                  <xsd:element name='gender' type='xsd:normalizedString' minOccurs='0' />
                  <xsd:element name='mustache_confidence' type='xsd:decimal' minOccurs='0' />
                  <xsd:element name='age_confidence' type='xsd:decimal' minOccurs='0' />
                  <xsd:element name='mask_areas' type='xsd:normalizedString' minOccurs='0' />
                  <xsd:element name='points' maxOccurs='unbounded'>
                    <xsd:complexType>
                      <xsd:sequence minOccurs='1' maxOccurs='1'>
                        <xsd:element name='x' type='xsd:decimal' minOccurs='0' />
                        <xsd:element name='y' type='xsd:decimal' minOccurs='0' />
                        <xsd:element name='type' type='xsd:int' minOccurs='0' />
                      </xsd:sequence>
                    </xsd:complexType>
                  </xsd:element>
                  <xsd:element name='tags' type='xsd:normalizedString' minOccurs='0' />
                  <xsd:element name='ethincity' type='xsd:normalizedString' minOccurs='0' />
                  <xsd:element name='score' type='xsd:decimal' minOccurs='0' />
                  <xsd:element name='uid' type='xsd:normalizedString' minOccurs='0' />
                  <xsd:element name='smile_confidence' type='xsd:decimal' minOccurs='0' />
                  <xsd:element name='user_points' type='xsd:normalizedString' minOccurs='0' />
                  <xsd:element name='classifiers' maxOccurs='unbounded'>
                    <xsd:complexType>
                      <xsd:sequence minOccurs='1' maxOccurs='1'>
                        <xsd:element name='confidence' type='xsd:decimal' minOccurs='0' />
                        <xsd:element name='name' type='xsd:normalizedString' minOccurs='0' />
                        <xsd:element name='value' type='xsd:normalizedString' minOccurs='0' />
                      </xsd:sequence>
                    </xsd:complexType>
                  </xsd:element>
                  <xsd:element name='width' type='xsd:decimal' minOccurs='0' />
                  <xsd:element name='x' type='xsd:decimal' minOccurs='0' />
                  <xsd:element name='angle' type='xsd:normalizedString' minOccurs='0' />
                  <xsd:element name='y' type='xsd:decimal' minOccurs='0' />
                  <xsd:element name='age' type='xsd:int' minOccurs='0' />
                  <xsd:element name='ethincity_confidence' type='xsd:decimal' minOccurs='0' />
                  <xsd:element name='height' type='xsd:decimal' minOccurs='0' />
                  <xsd:element name='measurements' type='xsd:normalizedString' minOccurs='0' />
                </xsd:sequence>
              </xsd:complexType>
            </xsd:element>
            <xsd:element name='face_image' type='xsd:int' maxOccurs='unbounded' />
            <xsd:element name='string_response' type='xsd:normalizedString' minOccurs='0' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='getimagefileinfoResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='uid' type='xsd:normalizedString' minOccurs='0' />
            <xsd:element name='int_response' type='xsd:int' minOccurs='0' />
            <xsd:element name='checksum' type='xsd:normalizedString' minOccurs='0' />
            <xsd:element name='string_response' type='xsd:normalizedString' minOccurs='0' />
            <xsd:element name='faces' maxOccurs='unbounded'>
              <xsd:complexType>
                <xsd:sequence minOccurs='1' maxOccurs='1'>
                  <xsd:element name='image_uid' type='xsd:normalizedString' minOccurs='0' />
                  <xsd:element name='score' type='xsd:decimal' minOccurs='0' />
                  <xsd:element name='uid' type='xsd:normalizedString' minOccurs='0' />
                  <xsd:element name='user_points' type='xsd:normalizedString' minOccurs='0' />
                  <xsd:element name='width' type='xsd:decimal' minOccurs='0' />
                  <xsd:element name='x' type='xsd:decimal' minOccurs='0' />
                  <xsd:element name='angle' type='xsd:decimal' minOccurs='0' />
                  <xsd:element name='y' type='xsd:decimal' minOccurs='0' />
                  <xsd:element name='height' type='xsd:decimal' minOccurs='0' />
                  <xsd:element name='points' maxOccurs='unbounded'>
                    <xsd:complexType>
                      <xsd:sequence minOccurs='1' maxOccurs='1'>
                        <xsd:element name='name' type='xsd:string' minOccurs='0' />
                        <xsd:element name='x' type='xsd:decimal' minOccurs='0' />
                        <xsd:element name='y' type='xsd:decimal' minOccurs='0' />
                        <xsd:element name='type' type='xsd:int' minOccurs='0' />
                      </xsd:sequence>
                    </xsd:complexType>
                  </xsd:element>
                  <xsd:element name='tags' type='xsd:normalizedString' minOccurs='0' />
                </xsd:sequence>
              </xsd:complexType>
            </xsd:element>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='getimageinfoResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='uid' type='xsd:normalizedString' minOccurs='0' />
            <xsd:element name='int_response' type='xsd:int' minOccurs='0' />
            <xsd:element name='checksum' type='xsd:normalizedString' minOccurs='0' />
            <xsd:element name='string_response' type='xsd:normalizedString' minOccurs='0' />
            <xsd:element name='faces' maxOccurs='unbounded'>
              <xsd:complexType>
                <xsd:sequence minOccurs='1' maxOccurs='1'>
                  <xsd:element name='image_uid' type='xsd:normalizedString' minOccurs='0' />
                  <xsd:element name='score' type='xsd:decimal' minOccurs='0' />
                  <xsd:element name='uid' type='xsd:normalizedString' minOccurs='0' />
                  <xsd:element name='user_points' type='xsd:normalizedString' minOccurs='0' />
                  <xsd:element name='width' type='xsd:decimal' minOccurs='0' />
                  <xsd:element name='x' type='xsd:decimal' minOccurs='0' />
                  <xsd:element name='angle' type='xsd:decimal' minOccurs='0' />
                  <xsd:element name='y' type='xsd:decimal' minOccurs='0' />
                  <xsd:element name='height' type='xsd:decimal' minOccurs='0' />
                  <xsd:element name='points' maxOccurs='unbounded'>
                    <xsd:complexType>
                      <xsd:sequence minOccurs='1' maxOccurs='1'>
                        <xsd:element name='name' type='xsd:string' minOccurs='0' />
                        <xsd:element name='x' type='xsd:decimal' minOccurs='0' />
                        <xsd:element name='y' type='xsd:decimal' minOccurs='0' />
                        <xsd:element name='type' type='xsd:int' minOccurs='0' />
                      </xsd:sequence>
                    </xsd:complexType>
                  </xsd:element>
                  <xsd:element name='tags' type='xsd:normalizedString' minOccurs='0' />
                </xsd:sequence>
              </xsd:complexType>
            </xsd:element>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='getrecognizeresultResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='faces_matches' minOccurs='0'>
              <xsd:complexType>
                <xsd:sequence minOccurs='1' maxOccurs='1'>
                  <xsd:element name='matches' maxOccurs='unbounded'>
                    <xsd:complexType>
                      <xsd:sequence minOccurs='1' maxOccurs='1'>
                        <xsd:element name='is_match' type='xsd:boolean' minOccurs='0' />
                        <xsd:element name='confidence' type='xsd:decimal' minOccurs='0' />
                        <xsd:element name='person_name' type='xsd:string' minOccurs='0' />
                        <xsd:element name='face_uid' type='xsd:normalizedString' minOccurs='0' />
                      </xsd:sequence>
                    </xsd:complexType>
                  </xsd:element>
                  <xsd:element name='face_uid' type='xsd:normalizedString' minOccurs='0' />
                </xsd:sequence>
              </xsd:complexType>
            </xsd:element>
            <xsd:element name='recognize_uid' type='xsd:normalizedString' minOccurs='0' />
            <xsd:element name='int_response' type='xsd:int' minOccurs='0' />
            <xsd:element name='string_response' type='xsd:string' minOccurs='0' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='gettransformresultResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='transform_uid' type='xsd:normalizedString' minOccurs='0' />
            <xsd:element name='int_response' type='xsd:int' minOccurs='0' />
            <xsd:element name='result_image' type='xsd:int' maxOccurs='unbounded' />
            <xsd:element name='string_response' type='xsd:normalizedString' minOccurs='0' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='recognizefacesResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='response' xmlns='xsd' type='any' maxOccurs='unbounded' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='setpersonResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='int_response' type='xsd:int' minOccurs='0' />
            <xsd:element name='string_response' type='xsd:normalizedString' minOccurs='0' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='transformfacesResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='transform_uid' type='xsd:normalizedString' minOccurs='0' />
            <xsd:element name='int_response' type='xsd:int' minOccurs='0' />
            <xsd:element name='string_response' type='xsd:normalizedString' minOccurs='0' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name='uploadimageResponse'>
        <xsd:complexType>
          <xsd:sequence minOccurs='1' maxOccurs='1'>
            <xsd:element name='img_uid' type='xsd:normalizedString' minOccurs='0' />
            <xsd:element name='int_response' type='xsd:int' minOccurs='0' />
            <xsd:element name='string_response' type='xsd:normalizedString' minOccurs='0' />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
    </xsd:schema>
  </types>
  <message name='getfaceimageRequestMessage' />
  <message name='getfaceimageResponseMessage'>
    <part name='response' element='tns:getfaceimageResponse' />
  </message>
  <message name='getimagefileinfoRequestMessage' />
  <message name='getimagefileinfoResponseMessage'>
    <part name='response' element='tns:getimagefileinfoResponse' />
  </message>
  <message name='getimageinfoRequestMessage' />
  <message name='getimageinfoResponseMessage'>
    <part name='response' element='tns:getimageinfoResponse' />
  </message>
  <message name='getrecognizeresultRequestMessage' />
  <message name='getrecognizeresultResponseMessage'>
    <part name='response' element='tns:getrecognizeresultResponse' />
  </message>
  <message name='gettransformresultRequestMessage' />
  <message name='gettransformresultResponseMessage'>
    <part name='response' element='tns:gettransformresultResponse' />
  </message>
  <message name='recognizefacesRequestMessage' />
  <message name='recognizefacesResponseMessage'>
    <part name='response' element='tns:recognizefacesResponse' />
  </message>
  <message name='setpersonRequestMessage' />
  <message name='setpersonResponseMessage'>
    <part name='response' element='tns:setpersonResponse' />
  </message>
  <message name='transformfacesRequestMessage' />
  <message name='transformfacesResponseMessage'>
    <part name='response' element='tns:transformfacesResponse' />
  </message>
  <message name='uploadimageRequestMessage' />
  <message name='uploadimageResponseMessage'>
    <part name='response' element='tns:uploadimageResponse' />
  </message>
  <portType name='betafaceAdvancedFaceRecognitionPortType'>
    <operation name='getfaceimage'>
      <documentation>this function returns cropped face JPEG image</documentation>
      <input message='tns:getfaceimageRequestMessage' name='getfaceimageInput' />
      <output message='tns:getfaceimageResponseMessage' name='getfaceimageOutput' />
    </operation>
    <operation name='getimagefileinfo'>
      <documentation>this function will return image metadata including faces or processing status of the image If image is not yet processed GetImageInfo return int response which means image is still in the queue If image was processed function return int response ok and you can parse the rest of the response img checksum is SHA checkusm of the image file http en wikipedia org wiki SHA that can be calculated without uploading image to webservice and also returned by GetImageInfo function You can use this function to retrieve cached image information of already processed image without uploading it again</documentation>
      <input message='tns:getimagefileinfoRequestMessage' name='getimagefileinfoInput' />
      <output message='tns:getimagefileinfoResponseMessage' name='getimagefileinfoOutput' />
    </operation>
    <operation name='getimageinfo'>
      <documentation>this function will return image metadata including faces or processing status of the image If image is not yet processed GetImageInfo return int response which means image is still in the queue If image was processed function return int response ok and you can parse the rest of the response img uid is image ID returned by one of Upload functions</documentation>
      <input message='tns:getimageinfoRequestMessage' name='getimageinfoInput' />
      <output message='tns:getimageinfoResponseMessage' name='getimageinfoOutput' />
    </operation>
    <operation name='getrecognizeresult'>
      <documentation>this function return results of recognition task or recognition request state If recognition request is not yet processed GetRecognizeResult will return int response which means request is still in the queue Keep calling GetRecognizeResult every seconds until you get int response not equal If request was processed integer result will be ok and you can parse the rest of the response In the result you will get separate FaceRecognizeInfo structure for each face ID you specified in the first list in Faces Recognize function To test the method insert in recognize uid UID returned by previous Faces Recognize call</documentation>
      <input message='tns:getrecognizeresultRequestMessage' name='getrecognizeresultInput' />
      <output message='tns:getrecognizeresultResponseMessage' name='getrecognizeresultOutput' />
    </operation>
    <operation name='gettransformresult'>
      <documentation></documentation>
      <input message='tns:gettransformresultRequestMessage' name='gettransformresultInput' />
      <output message='tns:gettransformresultResponseMessage' name='gettransformresultOutput' />
    </operation>
    <operation name='recognizefaces'>
      <documentation>this function is a main entry to execute similar persons search identification and verification tasks As with faces detection you first place recognition request with Faces Recognize function in the queue and then keep polling GetRecognizeResult function until you get the result Function accept two arrays first list array of faces face IDs you wish to analyze compare with other faces identify person verify is it a specific person Usually you have one Face ID in this array second list array of targets which should be used for comparison Targets can be individual face IDs full person names personname namespace or complete namespaces all namespace</documentation>
      <input message='tns:recognizefacesRequestMessage' name='recognizefacesInput' />
      <output message='tns:recognizefacesResponseMessage' name='recognizefacesOutput' />
    </operation>
    <operation name='setperson'>
      <documentation>this function allow you to group multiple face images under one person name and optionally assign this person to specific namespace Later you can instead of comparing new face image with selected face images from database compare new face image with selected persons from database or with all persons within specific namespace Person names and namespace names should contain only letters spaces numbers and symbol Symbol should separate person name from namespace When you assign person to namespace if namespace does not exists it will be created If no namespace is provided face will be assigned to default namespace with an empty name Person with the same name but different namespace considered to be different person Each face unique face ID can have only one person assigned to it To remove specific face from person faces collection simply assign it again to a different person or assign it to an empty string</documentation>
      <input message='tns:setpersonRequestMessage' name='setpersonInput' />
      <output message='tns:setpersonResponseMessage' name='setpersonOutput' />
    </operation>
    <operation name='transformfaces'>
      <documentation></documentation>
      <input message='tns:transformfacesRequestMessage' name='transformfacesInput' />
      <output message='tns:transformfacesResponseMessage' name='transformfacesOutput' />
    </operation>
    <operation name='uploadimage'>
      <documentation>upload binary image file or url for processing</documentation>
      <input message='tns:uploadimageRequestMessage' name='uploadimageInput' />
      <output message='tns:uploadimageResponseMessage' name='uploadimageOutput' />
    </operation>
  </portType>
  <binding name='betafaceAdvancedFaceRecognitionBinding' type='tns:betafaceAdvancedFaceRecognitionPortType'>
    <operation name='getfaceimage'>
      <soap12:operation soapAction='http://getfaceimage' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='getimagefileinfo'>
      <soap12:operation soapAction='http://getimagefileinfo' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='getimageinfo'>
      <soap12:operation soapAction='http://getimageinfo' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='getrecognizeresult'>
      <soap12:operation soapAction='http://getrecognizeresult' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='gettransformresult'>
      <soap12:operation soapAction='http://gettransformresult' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='recognizefaces'>
      <soap12:operation soapAction='http://recognizefaces' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='setperson'>
      <soap12:operation soapAction='http://setperson' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='transformfaces'>
      <soap12:operation soapAction='http://transformfaces' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
    <operation name='uploadimage'>
      <soap12:operation soapAction='http://uploadimage' style='document' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' />
      <input>
        <tns:body use='literal' />
      </input>
      <output>
        <tns:body use='literal' parts='response' />
      </output>
    </operation>
  </binding>
  <service name='betafaceAdvancedFaceRecognition'>
    <documentation>advanced face detection face recognition and face analysis API</documentation>
    <port name='betafaceAdvancedFaceRecognitionPort' binding='tns:betafaceAdvancedFaceRecognitionBinding' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/'>
      <soap12:address location='http://betafaceAdvancedFaceRecognition' />
    </port>
  </service>
</definitions>